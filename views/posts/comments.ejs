<div class="my-5">
    <h1 class="text-center mb-3">댓글 관리</h1>
    <div id="div_insert" style="display: none">
        <textarea id="txt-body" class="form-control" rows="5"></textarea>
        <div class="mt-2 text-end">
            <button id="btn-insert" class="btn btn-primary btn-sm px-5">등록</button>
        </div>
    </div>
    <div id="div_login" class="mt-2">
        <button id="btn-login" class="btn btn-primary w-100">로그인</button>
    </div>
    <div>
        <div class="mb-3">댓글 수 : <span id="total"></span></div>
    </div>
    <div id="div_comments"></div>
    <div id="pagination" class="pagination justify-content-center mt-5"></div>
</div>

<script id="temp_comments" type="x-handlebar-template">
    {{#each .}}
        <hr>
        <div>
            <div>
                <small><b>{{email}}</b></small> | 
                <small>{{date}}</small>
            </div>
            <div class="view{{id}}">
                <div class="ellipsis body">{{body}}</div>
                <div class="text-end" style="{{fn_display email}}">
                    <button class="btn-update btn-success btn btn-sm" cid="{{id}}">수정</button>
                    <button class="btn-delete btn btn-danger btn-sm" cid="{{id}}">삭제</button>
                </div>
            </div>
            <div class="edit{{id}}" style="display:none;">
                <div>
                    <textarea class="form-control body" rows="5">{{body}}</textarea>
                </div>
                <div class="text-end mt-2">
                    <button class="btn-save btn btn-primary btn-sm" cid="{{id}}">저장</button>
                    <button class="btn-cancel btn btn-secondary btn-sm" cid="{{id}}">취소</button>
                </div>
            </div>
        </div>
    {{/each}}
</script>

<script>
    Handlebars.registerHelper("fn_ellipsis", function() {

    });
    
    Handlebars.registerHelper("fn_display", function(email) {
        if (sessionStorage.getItem("email") != email) {
            return "display:none;"
        }
    });
</script>

<script type="module">
    import { app } from "/javascripts/firebaseInit.js";
    import { getFirestore, collection, addDoc } from "https://www.gstatic.com/firebasejs/10.4.0/firebase-firestore.js";
    import { query, orderBy, getDocs, where, doc, deleteDoc, getDoc, setDoc } from "https://www.gstatic.com/firebasejs/10.4.0/firebase-firestore.js";
    const db = getFirestore(app);

    let total = 0;
    const size = 3;
    let page = 1;
    
    const pid = "<%=id%>"
    if(sessionStorage.getItem('email')) {
        $("#div_insert, #div_login").toggle();
    }

    $("#btn-login").on("click", function(){
        sessionStorage.setItem("target", `/posts/read?id=${pid}`);
        location.href = '/users/login';
    });

    $("#btn-insert").on("click", async function(){
        const date = moment(new Date()).format("YYYY-MM-DD HH:mm:ss");
        const body = $("#txt-body").val();
        const email = sessionStorage.getItem('email');
        if(body == '') {
            alert('댓글 내용을 입력하세요.');
            $("#txt-body").focus();
            return;
        }
        const data = {pid, email, date, body};
        await addDoc(collection(db, "comments"), data);
        $("#txt-body").val("");
        getComments();
        alert("댓글 저장이 완료되었습니다.");
    });

    getComments();
    async function getComments() {
        const q = query(collection(db, 'comments'), where("pid", "==", pid), orderBy("date", "desc"));
        const snapshot = await getDocs(q);
        
        if (total != snapshot.docs.length) {
            total = snapshot.docs.length;
            const totalPages = Math.ceil(total / size);
            $("#pagination").twbsPagination("changeTotalPages", totalPages, 1);
        }
        $("#total").html(total);

        let rows = [];
        snapshot.docs.forEach((row, index)=>{
            const start = (page-1) * size;
            const end = page * size - 1;
            if (index >= start && index <= end) {
                rows.push({id: row.id, ...row.data()});
            }
        });
        const temp = Handlebars.compile($("#temp_comments").html());
        $("#div_comments").html(temp(rows));
    }

    // 댓글 내용을 클릭한 경우
    $("#div_comments").on("click", ".body", function() {
        $(this).toggleClass("ellipsis");
    });

    // 댓글 삭제 버튼 클릭 시
    $("#div_comments").on("click", ".btn-delete", async function() {
        const id = $(this).attr("cid");
        await deleteDoc(doc(db, `comments/${id}`));
        alert("삭제 성공");
        getComments();
    });
    
    // 댓글 수정 버튼 클릭 시 
    $("#div_comments").on("click", ".btn-update", function() {
        const id = $(this).attr("cid");
        $("#div_comments .edit"+id).show();
        $("#div_comments .view"+id).hide();
    });

    // 저장 버튼을 눌렀을 때
    $("#div_comments").on("click", ".btn-save", async function() {
        const id = $(this).attr("cid");
        const edit = $(this).parent().parent();
        const body = edit.find(".body").val();

        if(confirm(`게시글을 수정하시겠습니까?`)) {
            const comment = await getDoc(doc(db, `comments/${id}`));

            // 수정 적용
            await setDoc(doc(db, `comments/${id}`), {
                ...comment.data(),
                body: body
            });
            alert("수정 완료");
            getComments();
        }
        
        $("#div_comments .edit"+id).hide();
        $("#div_comments .view"+id).show();
    });

    // 취소 버튼을 눌렀을 때
    $("#div_comments").on("click", ".btn-cancel", function() {
        const id = $(this).attr("cid");
        $("#div_comments .edit"+id).hide();
        $("#div_comments .view"+id).show();
    });

    // 댓글 페이지네이션
    $('#pagination').twbsPagination({
        totalPages: 10, //총 페이지 번호 수
        visiblePages: 5, // 하단에서 한 번에 보여 지는 페이지 번호 수
        startPage : 1, // 시작 시 표시되는 현재 페이지
        initiateStartPageClick: false, // 플러그인이 시작 시 페이지 버튼 클릭 여부 (default : true)
        first : '<<', // 페이지네이션 버튼 중 처음으로 돌아가는 버튼에 쓰여 있는 텍스트
        prev : '<', // 이전 페이지 버튼에 쓰여 있는 텍스트
        next : '>', // 다음 페이지 버튼에 쓰여 있는 텍스트
        last : '>>', // 페이지네이션 버튼 중 마지막으로 가는 버튼에 쓰여 있는 텍스트
        onPageClick: function (event, clickPage) {
            page = clickPage;
            getComments();
        }
    });
</script>